# Binary Tree Data Structure
class Node(object):
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None
    
class BinaryTree(object):
    def __init__(self,root):
        self.root = Node(root)

    # Traversing the tree using the preorder
    def print_tree(self,value):
        if value == "preorder":
            return self.pre_order_traversal(tree.root, "")
        elif value == "inorder":
            return self.in_order_traversal(tree.root, "")
        elif value == "postorder":
            return self.post_order_traversal(tree.root, "")
        else:
            print("Enter the valid value for traversal type")
            return False
        

    def pre_order_traversal(self, start, traversal):
        # Root - Left - Right
        if start:
            traversal += (str(start.value) + "-")
            traversal = self.pre_order_traversal(start.left,traversal)
            traversal = self.pre_order_traversal(start.right,traversal)
        return traversal
    
    def in_order_traversal(self, start, traversal):
        # Left - Root _Right
        if start:
            traversal = self.in_order_traversal(start.left,traversal)
            traversal += (str(start.value) + "-")
            traversal = self.in_order_traversal(start.right ,traversal)
        return traversal
    
    def post_order_traversal(self, start, traversal):
        # Left - Right - Root
        if start:
            traversal = self.post_order_traversal(start.left, traversal)
            traversal = self.post_order_traversal(start.right,traversal)
            traversal += (str(start.value) + "-")
        return traversal


# Building the Binary Tree
tree = BinaryTree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)
tree.root.right.left = Node(6)
tree.root.right.right = Node(7)

# Printing the binary tree
output = tree.print_tree("preorder")
print(output)

# Printing the binary tree
output1 = tree.print_tree("inorder")
print(output1)

# Printing the binary tree 
output2 = tree.print_tree("postorder")
print(output2)


